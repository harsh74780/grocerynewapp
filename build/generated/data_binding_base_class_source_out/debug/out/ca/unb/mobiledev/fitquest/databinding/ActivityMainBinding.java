// Generated by view binder compiler. Do not edit!
package ca.unb.mobiledev.fitquest.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import ca.unb.mobiledev.fitquest.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.navigation.NavigationView;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final DrawerLayout rootView;

  @NonNull
  public final MaterialButton addWater;

  @NonNull
  public final TextView coin;

  @NonNull
  public final TextView currentExp;

  @NonNull
  public final TextView currentHealth;

  @NonNull
  public final DrawerLayout drawerLayout;

  @NonNull
  public final LinearProgressIndicator expBar;

  @NonNull
  public final LinearLayout expInfo;

  @NonNull
  public final LinearProgressIndicator healthBar;

  @NonNull
  public final LinearLayout healthInfo;

  @NonNull
  public final TextView level;

  @NonNull
  public final TextView maxExp;

  @NonNull
  public final TextView maxStep;

  @NonNull
  public final TextView maxWater;

  @NonNull
  public final NavigationView navView;

  @NonNull
  public final ConstraintLayout profile;

  @NonNull
  public final MaterialButton recordSleepButton;

  @NonNull
  public final MaterialButton removeWater;

  @NonNull
  public final MaterialCardView sleepCardView;

  @NonNull
  public final TextView sleepHeader;

  @NonNull
  public final MaterialCardView stepCardView;

  @NonNull
  public final TextView stepHeader;

  @NonNull
  public final LinearProgressIndicator stepProgressBar;

  @NonNull
  public final TextView stepsTaken;

  @NonNull
  public final MaterialCardView waterCardView;

  @NonNull
  public final TextView waterHeader;

  @NonNull
  public final TextView waterTaken;

  private ActivityMainBinding(@NonNull DrawerLayout rootView, @NonNull MaterialButton addWater,
      @NonNull TextView coin, @NonNull TextView currentExp, @NonNull TextView currentHealth,
      @NonNull DrawerLayout drawerLayout, @NonNull LinearProgressIndicator expBar,
      @NonNull LinearLayout expInfo, @NonNull LinearProgressIndicator healthBar,
      @NonNull LinearLayout healthInfo, @NonNull TextView level, @NonNull TextView maxExp,
      @NonNull TextView maxStep, @NonNull TextView maxWater, @NonNull NavigationView navView,
      @NonNull ConstraintLayout profile, @NonNull MaterialButton recordSleepButton,
      @NonNull MaterialButton removeWater, @NonNull MaterialCardView sleepCardView,
      @NonNull TextView sleepHeader, @NonNull MaterialCardView stepCardView,
      @NonNull TextView stepHeader, @NonNull LinearProgressIndicator stepProgressBar,
      @NonNull TextView stepsTaken, @NonNull MaterialCardView waterCardView,
      @NonNull TextView waterHeader, @NonNull TextView waterTaken) {
    this.rootView = rootView;
    this.addWater = addWater;
    this.coin = coin;
    this.currentExp = currentExp;
    this.currentHealth = currentHealth;
    this.drawerLayout = drawerLayout;
    this.expBar = expBar;
    this.expInfo = expInfo;
    this.healthBar = healthBar;
    this.healthInfo = healthInfo;
    this.level = level;
    this.maxExp = maxExp;
    this.maxStep = maxStep;
    this.maxWater = maxWater;
    this.navView = navView;
    this.profile = profile;
    this.recordSleepButton = recordSleepButton;
    this.removeWater = removeWater;
    this.sleepCardView = sleepCardView;
    this.sleepHeader = sleepHeader;
    this.stepCardView = stepCardView;
    this.stepHeader = stepHeader;
    this.stepProgressBar = stepProgressBar;
    this.stepsTaken = stepsTaken;
    this.waterCardView = waterCardView;
    this.waterHeader = waterHeader;
    this.waterTaken = waterTaken;
  }

  @Override
  @NonNull
  public DrawerLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addWater;
      MaterialButton addWater = ViewBindings.findChildViewById(rootView, id);
      if (addWater == null) {
        break missingId;
      }

      id = R.id.coin;
      TextView coin = ViewBindings.findChildViewById(rootView, id);
      if (coin == null) {
        break missingId;
      }

      id = R.id.currentExp;
      TextView currentExp = ViewBindings.findChildViewById(rootView, id);
      if (currentExp == null) {
        break missingId;
      }

      id = R.id.currentHealth;
      TextView currentHealth = ViewBindings.findChildViewById(rootView, id);
      if (currentHealth == null) {
        break missingId;
      }

      DrawerLayout drawerLayout = (DrawerLayout) rootView;

      id = R.id.expBar;
      LinearProgressIndicator expBar = ViewBindings.findChildViewById(rootView, id);
      if (expBar == null) {
        break missingId;
      }

      id = R.id.expInfo;
      LinearLayout expInfo = ViewBindings.findChildViewById(rootView, id);
      if (expInfo == null) {
        break missingId;
      }

      id = R.id.healthBar;
      LinearProgressIndicator healthBar = ViewBindings.findChildViewById(rootView, id);
      if (healthBar == null) {
        break missingId;
      }

      id = R.id.healthInfo;
      LinearLayout healthInfo = ViewBindings.findChildViewById(rootView, id);
      if (healthInfo == null) {
        break missingId;
      }

      id = R.id.level;
      TextView level = ViewBindings.findChildViewById(rootView, id);
      if (level == null) {
        break missingId;
      }

      id = R.id.maxExp;
      TextView maxExp = ViewBindings.findChildViewById(rootView, id);
      if (maxExp == null) {
        break missingId;
      }

      id = R.id.maxStep;
      TextView maxStep = ViewBindings.findChildViewById(rootView, id);
      if (maxStep == null) {
        break missingId;
      }

      id = R.id.maxWater;
      TextView maxWater = ViewBindings.findChildViewById(rootView, id);
      if (maxWater == null) {
        break missingId;
      }

      id = R.id.navView;
      NavigationView navView = ViewBindings.findChildViewById(rootView, id);
      if (navView == null) {
        break missingId;
      }

      id = R.id.profile;
      ConstraintLayout profile = ViewBindings.findChildViewById(rootView, id);
      if (profile == null) {
        break missingId;
      }

      id = R.id.recordSleepButton;
      MaterialButton recordSleepButton = ViewBindings.findChildViewById(rootView, id);
      if (recordSleepButton == null) {
        break missingId;
      }

      id = R.id.removeWater;
      MaterialButton removeWater = ViewBindings.findChildViewById(rootView, id);
      if (removeWater == null) {
        break missingId;
      }

      id = R.id.sleepCardView;
      MaterialCardView sleepCardView = ViewBindings.findChildViewById(rootView, id);
      if (sleepCardView == null) {
        break missingId;
      }

      id = R.id.sleepHeader;
      TextView sleepHeader = ViewBindings.findChildViewById(rootView, id);
      if (sleepHeader == null) {
        break missingId;
      }

      id = R.id.stepCardView;
      MaterialCardView stepCardView = ViewBindings.findChildViewById(rootView, id);
      if (stepCardView == null) {
        break missingId;
      }

      id = R.id.stepHeader;
      TextView stepHeader = ViewBindings.findChildViewById(rootView, id);
      if (stepHeader == null) {
        break missingId;
      }

      id = R.id.stepProgressBar;
      LinearProgressIndicator stepProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (stepProgressBar == null) {
        break missingId;
      }

      id = R.id.stepsTaken;
      TextView stepsTaken = ViewBindings.findChildViewById(rootView, id);
      if (stepsTaken == null) {
        break missingId;
      }

      id = R.id.waterCardView;
      MaterialCardView waterCardView = ViewBindings.findChildViewById(rootView, id);
      if (waterCardView == null) {
        break missingId;
      }

      id = R.id.waterHeader;
      TextView waterHeader = ViewBindings.findChildViewById(rootView, id);
      if (waterHeader == null) {
        break missingId;
      }

      id = R.id.waterTaken;
      TextView waterTaken = ViewBindings.findChildViewById(rootView, id);
      if (waterTaken == null) {
        break missingId;
      }

      return new ActivityMainBinding((DrawerLayout) rootView, addWater, coin, currentExp,
          currentHealth, drawerLayout, expBar, expInfo, healthBar, healthInfo, level, maxExp,
          maxStep, maxWater, navView, profile, recordSleepButton, removeWater, sleepCardView,
          sleepHeader, stepCardView, stepHeader, stepProgressBar, stepsTaken, waterCardView,
          waterHeader, waterTaken);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
